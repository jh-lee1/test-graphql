import Head from 'next/head';
import { Inter } from 'next/font/google';
import styles from '@/styles/Home.module.css';
import { PostItem } from '@/components/PostItem/PostItem';
import { GetServerSidePropsContext } from 'next';
import { useRouter } from 'next/router';
import { useInfiniteScroll } from '@/hooks/useInfiniteScroll';
import { GitObject, PullRequest, Repository } from '../../schema/__generated__/graphql';
import { apolloClient } from '../../utils/ApolloClient';
import { GIT_PR_QUERY } from '../../utils/query/GetPR';
import { RemoveMaybeAsList } from '../../utils/RemoveMaybe';

interface Props {
    data: {
        data: GitObject;
        loading: boolean;
        networkStatus: number;
    };
}

export default function Home(props: Props) {
    const router = useRouter();
    const pullRequestsNodes = RemoveMaybeAsList(props.data.data.repository.pullRequests.nodes ?? []);
    const { data, loading, lastEdge, isEndPage, setTarget } = useInfiniteScroll<PullRequest>({ initialData: pullRequestsNodes });

    return (
        <>
            <Head>
                <title>Test Graphql</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className={`${styles.main} `}>
                {data.map((item) => (
                    <PostItem key={item.id} title={item.title} createdAt={item.createdAt} comments={item.comments} />
                ))}
                {isEndPage && <div>페이지 끝 입니다.</div>}
                <div ref={setTarget}>{loading ? 'loading...' : lastEdge}</div>
            </main>
        </>
    );
}

export async function getServerSideProps(context: GetServerSidePropsContext) {
    const query = context.query;
    const page = query.page;
    const data = await apolloClient.query({
        query: GIT_PR_QUERY,
        variables: {
            page: null,
        },
    });

    return {
        props: {
            data,
        },
    };
}
